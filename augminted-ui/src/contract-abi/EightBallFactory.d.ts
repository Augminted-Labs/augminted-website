/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type EightBallAdded = ContractEventLog<{
  ballId: string;
  question: string;
  answer: string;
  0: string;
  1: string;
  2: string;
}>;

export interface EightBallFactory extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): EightBallFactory;
  clone(): EightBallFactory;
  methods: {
    askQuestion(_str: string): NonPayableTransactionObject<void>;

    _fetchAnswer(): NonPayableTransactionObject<string>;
  };
  events: {
    EightBallAdded(cb?: Callback<EightBallAdded>): EventEmitter;
    EightBallAdded(
      options?: EventOptions,
      cb?: Callback<EightBallAdded>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "EightBallAdded", cb: Callback<EightBallAdded>): void;
  once(
    event: "EightBallAdded",
    options: EventOptions,
    cb: Callback<EightBallAdded>
  ): void;
}
